name: Manual Release

on:
  push:
    tags:
      - 'v*' # Run only when a tag is manually pushed with the format v*, e.g., v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run tests
        run: bun run test
        env:
          RD_GITHUB_CLIENT_ID: ${{ secrets.RD_GITHUB_CLIENT_ID }}
          RD_GITHUB_CLIENT_SECRET: ${{ secrets.RD_GITHUB_CLIENT_SECRET }}
          RD_JWT_SECRET: ${{ secrets.RD_JWT_SECRET }}

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Build
        run: bun run build
        env:
          RD_JWT_SECRET: ${{ secrets.RD_JWT_SECRET }}
          RD_GITHUB_CLIENT_ID: ${{ secrets.RD_GITHUB_CLIENT_ID }}
          RD_GITHUB_CLIENT_SECRET: ${{ secrets.RD_GITHUB_CLIENT_SECRET }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            Dockerfile
            fly.toml

  create-manual-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          # Generate release notes from recent commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            RELEASE_NOTES=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG"..HEAD)
          else
            RELEASE_NOTES=$(git log --pretty=format:"- %s" --max-count=10)
          fi

          # Create GitHub release
          gh release create "$VERSION" \
            --title "Manual Release $VERSION" \
            --notes "## Changes

          $RELEASE_NOTES

          ## Deployment
          This is a manual release." \
            --latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build, create-manual-release]
    if: always() && needs.build.result == 'success' && (needs.create-manual-release.result == 'success' || needs.create-manual-release.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          # Pass environment variables needed for the application
          RD_JWT_SECRET: ${{ secrets.RD_JWT_SECRET }}
          RD_GITHUB_CLIENT_ID: ${{ secrets.RD_GITHUB_CLIENT_ID }}
          RD_GITHUB_CLIENT_SECRET: ${{ secrets.RD_GITHUB_CLIENT_SECRET }}
